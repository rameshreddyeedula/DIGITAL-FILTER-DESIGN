#CODE
// Code your design here
module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,
    output reg signed [15:0] y_out
);
    // 4-tap FIR filter coefficients: h0, h1, h2, h3
    parameter signed [7:0] h0 = 8'd1;
    parameter signed [7:0] h1 = 8'd2;
    parameter signed [7:0] h2 = 8'd3;
    parameter signed [7:0] h3 = 8'd4;

    reg signed [7:0] x_reg [0:3]; // shift register

    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < 4; i = i + 1)
                x_reg[i] <= 0;
            y_out <= 0;
        end else begin
            // Shift samples
            x_reg[3] <= x_reg[2];
            x_reg[2] <= x_reg[1];
            x_reg[1] <= x_reg[0];
            x_reg[0] <= x_in;

            // FIR output: y[n] = h0*x[n] + h1*x[n-1] + ...
            y_out <= (h0 * x_reg[0]) +
                     (h1 * x_reg[1]) +
                     (h2 * x_reg[2]) +
                     (h3 * x_reg[3]);
        end
    end
endmodule


#TESTBENCH
// Code your testbench here
module tb_fir_filter;
    reg clk;
    reg reset;
    reg signed [7:0] x_in;
    wire signed [15:0] y_out;

    fir_filter uut (
        .clk(clk),
        .reset(reset),
        .x_in(x_in),
        .y_out(y_out)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        $dumpfile("fir_filter.vcd");
        $dumpvars(0, tb_fir_filter);

        // Initial values
        clk = 0;
        reset = 1;
        x_in = 0;

        // Hold reset
        #12;
        reset = 0;

        // Input stimulus
        #10 x_in = 8'd1;
        #10 x_in = 8'd2;
        #10 x_in = 8'd3;
        #10 x_in = 8'd4;
        #10 x_in = 8'd5;
        #10 x_in = 8'd0;
        #10 x_in = -8'd2;
        #10 x_in = -8'd1;
        #10 x_in = 8'd0;
        #40;

        $finish;
    end

    // Display simulation activity
    always @(posedge clk) begin
        $display("Time: %0t | x_in: %d | y_out: %d", $time, x_in, y_out);
    end
endmodule
